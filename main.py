# main.py (Phi√™n b·∫£n N√¢ng C·∫•p - Tr√¨nh ƒë·ªçc ·∫£nh ch√≠nh x√°c cao)

import discord
from discord.ext import commands
import os
import re
import requests
import io
import pytesseract
from PIL import Image, ImageEnhance, ImageFilter, ImageOps
from dotenv import load_dotenv
import threading
from flask import Flask
import asyncio

# --- PH·∫¶N 1: C·∫§U H√åNH WEB SERVER ---
app = Flask(__name__)

@app.route('/')
def home():
    """Trang ch·ªß ƒë∆°n gi·∫£n ƒë·ªÉ hi·ªÉn th·ªã bot ƒëang ho·∫°t ƒë·ªông."""
    return "Bot Discord ƒëang ho·∫°t ƒë·ªông."

def run_web_server():
    """Ch·∫°y web server Flask tr√™n c·ªïng ƒë∆∞·ª£c c·∫•u h√¨nh."""
    port = int(os.environ.get('PORT', 10000))
    app.run(host='0.0.0.0', port=port)

# --- PH·∫¶N 2: C·∫§U H√åNH V√Ä C√ÅC H√ÄM C·ª¶A BOT DISCORD ---
load_dotenv()
TOKEN = os.getenv('DISCORD_TOKEN')
KARUTA_ID = 646937666251915264
NEW_CHARACTERS_FILE = "new_characters.txt"
HEART_DATABASE_FILE = "tennhanvatvasotim.txt"

def load_heart_data(file_path):
    """
    T·∫£i d·ªØ li·ªáu s·ªë tim c·ªßa nh√¢n v·∫≠t t·ª´ m·ªôt file.
    D·ªØ li·ªáu ƒë∆∞·ª£c l∆∞u tr·ªØ trong m·ªôt dictionary (c∆° s·ªü d·ªØ li·ªáu trong b·ªô nh·ªõ).
    """
    heart_db = {}
    try:
        with open(file_path, 'r', encoding='utf-8') as f:
            for line in f:
                line = line.strip()
                if not line.startswith('‚ô°') or not line:
                    continue
                parts = line.split('¬∑')
                if len(parts) >= 2:
                    try:
                        heart_str = parts[0].replace('‚ô°', '').replace(',', '').strip()
                        hearts = int(heart_str)
                        name = parts[-1].lower().strip()
                        if name:
                            heart_db[name] = hearts
                    except (ValueError, IndexError):
                        continue
    except FileNotFoundError:
        print(f"L·ªñI: Kh√¥ng t√¨m th·∫•y t·ªáp d·ªØ li·ªáu '{file_path}'.")
    except Exception as e:
        print(f"L·ªói khi ƒë·ªçc t·ªáp d·ªØ li·ªáu: {e}")
    print(f"‚úÖ ƒê√£ t·∫£i th√†nh c√¥ng {len(heart_db)} nh√¢n v·∫≠t v√†o c∆° s·ªü d·ªØ li·ªáu s·ªë tim.")
    return heart_db

HEART_DATABASE = load_heart_data(HEART_DATABASE_FILE)

def log_new_character(character_name):
    """
    Ghi l·∫°i t√™n nh√¢n v·∫≠t m·ªõi ch∆∞a c√≥ trong c∆° s·ªü d·ªØ li·ªáu s·ªë tim v√†o m·ªôt file.
    ƒê·∫£m b·∫£o kh√¥ng ghi tr√πng l·∫∑p t√™n.
    """
    try:
        existing_names = set()
        if os.path.exists(NEW_CHARACTERS_FILE):
            with open(NEW_CHARACTERS_FILE, 'r', encoding='utf-8') as f:
                existing_names = set(line.strip().lower() for line in f)
        
        if character_name and character_name.lower() not in existing_names:
            with open(NEW_CHARACTERS_FILE, 'a', encoding='utf-8') as f:
                f.write(f"{character_name}\n")
            print(f"  [LOG] ‚≠ê ƒê√£ l∆∞u nh√¢n v·∫≠t m·ªõi '{character_name}' v√†o file {NEW_CHARACTERS_FILE}")
    except Exception as e:
        print(f"L·ªói khi ƒëang l∆∞u nh√¢n v·∫≠t m·ªõi: {e}")

def get_names_from_image_upgraded(image_bytes):
    """
    H√†m ƒë·ªçc ·∫£nh ƒë∆∞·ª£c n√¢ng c·∫•p v·ªõi k·ªπ thu·∫≠t c·∫Øt ·∫£nh ch√≠nh x√°c v√† ti·ªÅn x·ª≠ l√Ω ·∫£nh
    c·∫£i ti·∫øn ƒë·ªÉ tƒÉng ƒë·ªô ch√≠nh x√°c c·ªßa OCR.
    """
    try:
        main_image = Image.open(io.BytesIO(image_bytes))
        width, height = main_image.size

        if not (width > 800 and height > 200):
            print(f"  [LOG] K√≠ch th∆∞·ªõc ·∫£nh kh√¥ng gi·ªëng ·∫£nh drop Karuta: {width}x{height}. B·ªè qua.")
            return []

        card_width = 278
        card_height = 248
        x_coords = [0, 279, 558] 

        extracted_names = []
        
        # C·∫•u h√¨nh Tesseract OCR:
        # --psm 6: Assume a single uniform block of text.
        # --oem 3: Use both Legacy and LSTM OCR engine.
        # B·ªè 'tessedit_char_whitelist' ƒë·ªÉ Tesseract t·ª± do nh·∫≠n di·ªán m·ªçi k√Ω t·ª±, sau ƒë√≥ h·∫≠u x·ª≠ l√Ω.
        custom_config = r'--psm 6 --oem 3' 

        for i in range(3):
            card_box = (x_coords[i], 0, x_coords[i] + card_width, card_height)
            card_img = main_image.crop(card_box)

            name_box = (15, 15, card_width - 15, 60) 
            name_img = card_img.crop(name_box)

            # Ti·ªÅn x·ª≠ l√Ω ·∫£nh n√¢ng cao:
            name_img = name_img.convert('L') # 1. Chuy·ªÉn sang ·∫£nh x√°m
            
            # 2. TƒÉng ƒë·ªô t∆∞∆°ng ph·∫£n m·∫°nh h∆°n
            enhancer = ImageEnhance.Contrast(name_img)
            name_img = enhancer.enhance(2.5) # TƒÉng t·ª´ 2.0 l√™n 2.5

            # 3. L√†m s·∫Øc n√©t m·∫°nh h∆°n
            name_img = name_img.filter(ImageFilter.SHARPEN)
            name_img = name_img.filter(ImageFilter.SHARPEN) # √Åp d·ª•ng l√†m s·∫Øc n√©t 2 l·∫ßn

            # 4. Nh·ªã ph√¢n h√≥a:
            # ƒê·∫£o m√†u ƒë·ªÉ ch·ªØ ƒëen tr√™n n·ªÅn tr·∫Øng (th∆∞·ªùng hi·ªáu qu·∫£ h∆°n cho Tesseract)
            name_img = ImageOps.invert(name_img) 
            # √Åp d·ª•ng ng∆∞·ª°ng ƒë·ªÉ bi·∫øn pixel th√†nh ƒëen ho·∫∑c tr·∫Øng. Th·ª≠ ng∆∞·ª°ng ƒë·ªông n·∫øu c·∫ßn.
            # V·ªõi ng∆∞·ª°ng c·ªë ƒë·ªãnh, 128 l√† gi√° tr·ªã trung b√¨nh, c√≥ th·ªÉ th·ª≠ tinh ch·ªânh n·∫øu ch·ªØ qu√° m·ªù ho·∫∑c qu√° ƒë·∫≠m.
            name_img = name_img.point(lambda x: 0 if x < 128 else 255) 
            
            # N·∫øu t√™n v·∫´n kh√≥ ƒë·ªçc, c√≥ th·ªÉ th·ª≠ m·ªôt ng∆∞·ª°ng kh√°c, v√≠ d·ª• 100 ho·∫∑c 150
            # name_img = name_img.point(lambda x: 0 if x < 100 else 255) 

            text = pytesseract.image_to_string(name_img, config=custom_config)
            
            # H·∫≠u x·ª≠ l√Ω t√™n:
            # Lo·∫°i b·ªè k√Ω t·ª± xu·ªëng d√≤ng v√† kho·∫£ng tr·∫Øng th·ª´a
            cleaned_name = text.strip().replace("\n", " ") 
            
            # L·ªçc b·ªè c√°c k√Ω t·ª± kh√¥ng ph·∫£i ch·ªØ c√°i, s·ªë, ho·∫∑c kho·∫£ng tr·∫Øng
            # ƒêi·ªÅu n√†y gi√∫p lo·∫°i b·ªè c√°c k√Ω t·ª± r√°c n·∫øu b·ªè whitelist trong custom_config
            cleaned_name = re.sub(r'[^a-zA-Z0-9\s]', '', cleaned_name)
            
            # ƒê·∫£m b·∫£o t√™n kh√¥ng qu√° ng·∫Øn ho·∫∑c ch·ªâ to√†n kho·∫£ng tr·∫Øng sau khi l·ªçc
            if len(cleaned_name) > 1 and not all(char.isspace() for char in cleaned_name):
                extracted_names.append(cleaned_name)
            else:
                extracted_names.append("Kh√¥ng ƒë·ªçc ƒë∆∞·ª£c")

        return extracted_names
    except Exception as e:
        print(f"  [L·ªñI] X·∫£y ra l·ªói trong qu√° tr√¨nh x·ª≠ l√Ω ·∫£nh: {e}")
        return ["L·ªói OCR (Th·∫ª 1)", "L·ªói OCR (Th·∫ª 2)", "L·ªói OCR (Th·∫ª 3)"]

# --- PH·∫¶N CH√çNH C·ª¶A BOT ---
intents = discord.Intents.default()
intents.message_content = True
bot = commands.Bot(command_prefix="!", intents=intents)

@bot.command()
async def ping(ctx):
    """L·ªánh ping ƒë∆°n gi·∫£n ƒë·ªÉ ki·ªÉm tra bot c√≥ ho·∫°t ƒë·ªông kh√¥ng."""
    await ctx.send("Pong!")

@bot.event
async def on_ready():
    """S·ª± ki·ªán khi bot ƒë√£ ƒëƒÉng nh·∫≠p th√†nh c√¥ng v√†o Discord."""
    print(f'‚úÖ Bot Discord ƒë√£ ƒëƒÉng nh·∫≠p v·ªõi t√™n {bot.user}')
    print('Bot ƒëang ch·∫°y v·ªõi tr√¨nh ƒë·ªçc ·∫£nh n√¢ng c·∫•p.')

@bot.event
async def on_message(message):
    """
    S·ª± ki·ªán x·ª≠ l√Ω m·ªói khi c√≥ tin nh·∫Øn m·ªõi.
    Bot s·∫Ω ki·ªÉm tra n·∫øu tin nh·∫Øn ƒë·∫øn t·ª´ Karuta v√† c√≥ ·∫£nh ƒë√≠nh k√®m ƒë·ªÉ x·ª≠ l√Ω.
    """
    await bot.process_commands(message)
    
    if not (message.author.id == KARUTA_ID and message.attachments):
        return

    attachment = message.attachments[0]
    if not attachment.content_type.startswith('image/'):
        return

    print("\n" + "="*40)
    print(f"üîé [LOG] Ph√°t hi·ªán ·∫£nh drop t·ª´ KARUTA. B·∫Øt ƒë·∫ßu x·ª≠ l√Ω...")
    print(f"  - URL ·∫£nh: {attachment.url}")
    print(f"  - K√≠ch th∆∞·ªõc ·∫£nh d·ª± ki·∫øn: {attachment.width}x{attachment.height}")

    try:
        response = requests.get(attachment.url)
        response.raise_for_status()
        image_bytes = response.content

        character_names = get_names_from_image_upgraded(image_bytes)
        
        print(f"  -> K·∫øt qu·∫£ nh·∫≠n d·∫°ng t√™n: {character_names}")

        if not character_names or all(name == "Kh√¥ng ƒë·ªçc ƒë∆∞·ª£c" or name.startswith("L·ªói OCR") for name in character_names):
            print("  -> Kh√¥ng nh·∫≠n d·∫°ng ƒë∆∞·ª£c t√™n n√†o ho·∫∑c c√≥ l·ªói nh·∫≠n d·∫°ng. B·ªè qua.")
            print("="*40 + "\n")
            if all(name == "Kh√¥ng ƒë·ªçc ƒë∆∞·ª£c" or name.startswith("L·ªói OCR") for name in character_names):
                 await message.reply("Xin l·ªói, t√¥i kh√¥ng th·ªÉ ƒë·ªçc ƒë∆∞·ª£c t√™n nh√¢n v·∫≠t t·ª´ ·∫£nh n√†y. Vui l√≤ng th·ª≠ l·∫°i v·ªõi ·∫£nh r√µ h∆°n ho·∫∑c b√°o c√°o l·ªói n·∫øu v·∫•n ƒë·ªÅ ti·∫øp di·ªÖn.")
            return

        async with message.channel.typing():
            await asyncio.sleep(1)

            reply_lines = []
            for i, name in enumerate(character_names):
                display_name = name if name and not name.startswith("L·ªói OCR") else "Kh√¥ng ƒë·ªçc ƒë∆∞·ª£c"
                lookup_name = name.lower().strip() if name and not name.startswith("L·ªói OCR") else ""
                
                if lookup_name and lookup_name not in HEART_DATABASE and lookup_name != "kh√¥ng ƒë·ªçc ƒë∆∞·ª£c":
                    log_new_character(name)

                heart_value = HEART_DATABASE.get(lookup_name, 0)
                heart_display = f"{heart_value:,}" if heart_value > 0 else "N/A"
                
                reply_lines.append(f"{i+1} | ‚ô°**{heart_display}** ¬∑ `{display_name}`")
            
            reply_content = "\n".join(reply_lines)
            await message.reply(reply_content)
            print("‚úÖ ƒê√É G·ª¨I PH·∫¢N H·ªíI TH√ÄNH C√îNG")

    except requests.exceptions.RequestException as e:
        print(f"  [L·ªñI] Kh√¥ng th·ªÉ t·∫£i ·∫£nh t·ª´ URL: {e}")
        await message.reply(f"Xin l·ªói, t√¥i kh√¥ng th·ªÉ t·∫£i ·∫£nh t·ª´ URL n√†y. L·ªói: {e}")
    except Exception as e:
        print(f"  [L·ªñI] ƒê√£ x·∫£y ra l·ªói kh√¥ng x√°c ƒë·ªãnh: {e}")
        await message.reply(f"ƒê√£ x·∫£y ra l·ªói khi x·ª≠ l√Ω ·∫£nh c·ªßa b·∫°n. L·ªói: {e}")

    print("="*40 + "\n")


# --- PH·∫¶N KH·ªûI ƒê·ªòNG ---
if __name__ == "__main__":
    # L∆∞u √Ω: N·∫øu Tesseract kh√¥ng n·∫±m trong PATH, b·∫°n c·∫ßn th√™m d√≤ng sau:
    # pytesseract.pytesseract.tesseract_cmd = r'C:\\Program Files\\Tesseract-OCR\\tesseract.exe'
    # ho·∫∑c ƒë∆∞·ªùng d·∫´n ƒë·∫øn file tesseract.exe tr√™n h·ªá th·ªëng c·ªßa b·∫°n.

    if TOKEN:
        bot_thread = threading.Thread(target=bot.run, args=(TOKEN,))
        bot_thread.start()
        print("üöÄ Kh·ªüi ƒë·ªông Web Server ƒë·ªÉ gi·ªØ bot ho·∫°t ƒë·ªông...")
        run_web_server()
    else:
        print("L·ªñI: Kh√¥ng t√¨m th·∫•y DISCORD_TOKEN trong t·ªáp .env. Vui l√≤ng t·∫°o file .env v√† th√™m TOKEN c·ªßa bot.")
