# main.py (Phi√™n b·∫£n N√¢ng C·∫•p - Tr√¨nh ƒë·ªçc ·∫£nh ch√≠nh x√°c cao v·ªõi Gemini API)

import discord
from discord.ext import commands
import os
import re
import requests
import io
import base64
from PIL import Image, ImageEnhance, ImageFilter, ImageOps
from dotenv import load_dotenv
import threading
from flask import Flask
import asyncio

# --- PH·∫¶N 1: C·∫§U H√åNH WEB SERVER ---
app = Flask(__name__)

@app.route('/')
def home():
    """Trang ch·ªß ƒë∆°n gi·∫£n ƒë·ªÉ hi·ªÉn th·ªã bot ƒëang ho·∫°t ƒë·ªông."""
    return "Bot Discord ƒëang ho·∫°t ƒë·ªông."

def run_web_server():
    """Ch·∫°y web server Flask tr√™n c·ªïng ƒë∆∞·ª£c c·∫•u h√¨nh."""
    port = int(os.environ.get('PORT', 10000))
    app.run(host='0.0.0.0', port=port)

# --- PH·∫¶N 2: C·∫§U H√åNH V√Ä C√ÅC H√ÄM C·ª¶A BOT DISCORD ---
load_dotenv() # T·∫£i c√°c bi·∫øn m√¥i tr∆∞·ªùng t·ª´ t·ªáp .env

# L·∫•y TOKEN v√† API KEY t·ª´ file .env
TOKEN = os.getenv('DISCORD_TOKEN')
GEMINI_API_KEY = os.getenv('GEMINI_API_KEY') # <<< THAY ƒê·ªîI QUAN TR·ªåNG

KARUTA_ID = 646937666251915264
NEW_CHARACTERS_FILE = "new_characters.txt"
HEART_DATABASE_FILE = "tennhanvatvasotim.txt"

def load_heart_data(file_path):
    """
    T·∫£i d·ªØ li·ªáu s·ªë tim c·ªßa nh√¢n v·∫≠t t·ª´ m·ªôt file.
    D·ªØ li·ªáu ƒë∆∞·ª£c l∆∞u tr·ªØ trong m·ªôt dictionary (c∆° s·ªü d·ªØ li·ªáu trong b·ªô nh·ªõ).
    """
    heart_db = {}
    try:
        with open(file_path, 'r', encoding='utf-8') as f:
            for line in f:
                line = line.strip()
                if not line.startswith('‚ô°') or not line:
                    continue
                parts = line.split('¬∑')
                if len(parts) >= 2:
                    try:
                        heart_str = parts[0].replace('‚ô°', '').replace(',', '').strip()
                        hearts = int(heart_str)
                        name = parts[-1].lower().strip()
                        if name:
                            heart_db[name] = hearts
                    except (ValueError, IndexError):
                        continue
    except FileNotFoundError:
        print(f"L·ªñI: Kh√¥ng t√¨m th·∫•y t·ªáp d·ªØ li·ªáu '{file_path}'.")
    except Exception as e:
        print(f"L·ªói khi ƒë·ªçc t·ªáp d·ªØ li·ªáu: {e}")
    print(f"‚úÖ ƒê√£ t·∫£i th√†nh c√¥ng {len(heart_db)} nh√¢n v·∫≠t v√†o c∆° s·ªü d·ªØ li·ªáu s·ªë tim.")
    return heart_db

HEART_DATABASE = load_heart_data(HEART_DATABASE_FILE)

def log_new_character(character_name):
    """
    Ghi l·∫°i t√™n nh√¢n v·∫≠t m·ªõi ch∆∞a c√≥ trong c∆° s·ªü d·ªØ li·ªáu s·ªë tim v√†o m·ªôt file.
    ƒê·∫£m b·∫£o kh√¥ng ghi tr√πng l·∫∑p t√™n.
    """
    try:
        existing_names = set()
        if os.path.exists(NEW_CHARACTERS_FILE):
            with open(NEW_CHARACTERS_FILE, 'r', encoding='utf-8') as f:
                existing_names = set(line.strip().lower() for line in f)
        
        if character_name and character_name.lower() not in existing_names:
            with open(NEW_CHARACTERS_FILE, 'a', encoding='utf-8') as f:
                f.write(f"{character_name}\n")
            print(f"  [LOG] ‚≠ê ƒê√£ l∆∞u nh√¢n v·∫≠t m·ªõi '{character_name}' v√†o file {NEW_CHARACTERS_FILE}")
    except Exception as e:
        print(f"L·ªói khi ƒëang l∆∞u nh√¢n v·∫≠t m·ªõi: {e}")

async def get_names_from_image_via_gemini_api(image_bytes):
    """
    S·ª≠ d·ª•ng Gemini API ƒë·ªÉ nh·∫≠n di·ªán t√™n nh√¢n v·∫≠t t·ª´ ·∫£nh.
    Tr·∫£ v·ªÅ danh s√°ch t√™n nh√¢n v·∫≠t.
    """
    # <<< THAY ƒê·ªîI QUAN TR·ªåNG: Ki·ªÉm tra xem API Key c√≥ t·ªìn t·∫°i kh√¥ng
    if not GEMINI_API_KEY:
        print("  [L·ªñI API] Bi·∫øn m√¥i tr∆∞·ªùng GEMINI_API_KEY ch∆∞a ƒë∆∞·ª£c thi·∫øt l·∫≠p.")
        return ["L·ªói API (Key)", "L·ªói API (Key)", "L·ªói API (Key)"]
        
    try:
        # M√£ h√≥a ·∫£nh sang Base64
        base64_image = base64.b64encode(image_bytes).decode('utf-8')

        # ƒê·ªãnh nghƒ©a prompt ƒë·ªÉ h·ªèi AI v·ªÅ t√™n nh√¢n v·∫≠t
        prompt = "T·ª´ h√¨nh ·∫£nh th·∫ª b√†i Karuta n√†y, h√£y tr√≠ch xu·∫•t v√† li·ªát k√™ t√™n c√°c nh√¢n v·∫≠t theo th·ª© t·ª± t·ª´ tr√°i sang ph·∫£i. Ch·ªâ tr·∫£ v·ªÅ t√™n, m·ªói t√™n tr√™n m·ªôt d√≤ng."

        # C·∫•u tr√∫c payload cho Gemini API
        payload = {
            "contents": [
                {
                    "role": "user",
                    "parts": [
                        {"text": prompt},
                        {
                            "inlineData": {
                                "mimeType": "image/webp", # MIME type c·ªßa ·∫£nh drop Karuta th∆∞·ªùng l√† webp
                                "data": base64_image
                            }
                        }
                    ]
                }
            ]
        }
        
        # C·∫•u h√¨nh URL v·ªõi API Key ƒë√£ ƒë∆∞·ª£c t·∫£i t·ª´ .env
        apiUrl = "https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-flash:generateContent?key=" + GEMINI_API_KEY # <<< THAY ƒê·ªîI QUAN TR·ªåNG
        # ƒê√£ c·∫≠p nh·∫≠t l√™n model gemini-1.5-flash m·ªõi h∆°n v√† ·ªïn ƒë·ªãnh h∆°n

        print("  [API] ƒêang g·ª≠i ·∫£nh ƒë·∫øn Gemini API ƒë·ªÉ nh·∫≠n d·∫°ng...")
        
        # G·ª≠i y√™u c·∫ßu ƒë·∫øn Gemini API
        response = requests.post(apiUrl, headers={'Content-Type': 'application/json'}, json=payload)
        response.raise_for_status() # B√°o l·ªói n·∫øu c√≥ l·ªói HTTP

        result = response.json()
        
        # Ph√¢n t√≠ch ph·∫£n h·ªìi t·ª´ API
        if result and result.get('candidates') and result['candidates'][0].get('content') and result['candidates'][0]['content'].get('parts'):
            api_text = result['candidates'][0]['content']['parts'][0]['text']
            names = [name.strip() for name in api_text.split('\n') if name.strip()]
            
            # H·∫≠u x·ª≠ l√Ω nh·ªè (lo·∫°i b·ªè k√Ω t·ª± kh√¥ng c·∫ßn thi·∫øt)
            processed_names = []
            for name in names:
                cleaned = re.sub(r'[^a-zA-Z0-9\s\'-.]', '', name)
                cleaned = ' '.join(cleaned.split())
                processed_names.append(cleaned)

            print(f"  [API] Nh·∫≠n d·∫°ng t·ª´ Gemini API: {processed_names}")
            return processed_names
        else:
            print("  [API] Ph·∫£n h·ªìi t·ª´ Gemini API kh√¥ng ch·ª©a d·ªØ li·ªáu h·ª£p l·ªá.")
            return ["Kh√¥ng ƒë·ªçc ƒë∆∞·ª£c (API)", "Kh√¥ng ƒë·ªçc ƒë∆∞·ª£c (API)", "Kh√¥ng ƒë·ªçc ƒë∆∞·ª£c (API)"]

    except requests.exceptions.RequestException as e:
        print(f"  [L·ªñI API] L·ªói khi g·ªçi Gemini API: {e}")
        return ["L·ªói API (Request)", "L·ªói API (Request)", "L·ªói API (Request)"]
    except Exception as e:
        print(f"  [L·ªñI API] ƒê√£ x·∫£y ra l·ªói kh√¥ng x√°c ƒë·ªãnh khi x·ª≠ l√Ω API: {e}")
        return ["L·ªói API (Unknown)", "L·ªói API (Unknown)", "L·ªói API (Unknown)"]

async def get_names_from_image_upgraded(image_bytes):
    """
    H√†m ƒë·ªçc ·∫£nh ƒë∆∞·ª£c n√¢ng c·∫•p, s·ª≠ d·ª•ng Gemini API.
    """
    return await get_names_from_image_via_gemini_api(image_bytes)

# --- PH·∫¶N CH√çNH C·ª¶A BOT ---
intents = discord.Intents.default()
intents.message_content = True
bot = commands.Bot(command_prefix="!", intents=intents)

@bot.command()
async def ping(ctx):
    """L·ªánh ping ƒë∆°n gi·∫£n ƒë·ªÉ ki·ªÉm tra bot c√≥ ho·∫°t ƒë·ªông kh√¥ng."""
    await ctx.send("Pong!")

@bot.event
async def on_ready():
    """S·ª± ki·ªán khi bot ƒë√£ ƒëƒÉng nh·∫≠p th√†nh c√¥ng v√†o Discord."""
    print(f'‚úÖ Bot Discord ƒë√£ ƒëƒÉng nh·∫≠p v·ªõi t√™n {bot.user}')
    print('Bot ƒëang ch·∫°y v·ªõi tr√¨nh ƒë·ªçc ·∫£nh n√¢ng c·∫•p (s·ª≠ d·ª•ng Gemini API).')

@bot.event
async def on_message(message):
    """
    S·ª± ki·ªán x·ª≠ l√Ω m·ªói khi c√≥ tin nh·∫Øn m·ªõi.
    Bot s·∫Ω ki·ªÉm tra n·∫øu tin nh·∫Øn ƒë·∫øn t·ª´ Karuta v√† c√≥ ·∫£nh ƒë√≠nh k√®m ƒë·ªÉ x·ª≠ l√Ω.
    """
    await bot.process_commands(message)
    
    if not (message.author.id == KARUTA_ID and message.attachments):
        return

    attachment = message.attachments[0]
    if not attachment.content_type.startswith('image/'):
        return

    print("\n" + "="*40)
    print(f"üîé [LOG] Ph√°t hi·ªán ·∫£nh drop t·ª´ KARUTA. B·∫Øt ƒë·∫ßu x·ª≠ l√Ω...")
    print(f"  - URL ·∫£nh: {attachment.url}")

    try:
        response = requests.get(attachment.url)
        response.raise_for_status()
        image_bytes = response.content

        # G·ªçi h√†m x·ª≠ l√Ω ·∫£nh n√¢ng c·∫•p
        character_names = await get_names_from_image_upgraded(image_bytes)
        
        print(f"  -> K·∫øt qu·∫£ nh·∫≠n d·∫°ng t√™n: {character_names}")

        if not character_names or any(name.startswith("L·ªói API") for name in character_names):
            print("  -> L·ªói API ho·∫∑c kh√¥ng nh·∫≠n d·∫°ng ƒë∆∞·ª£c t√™n. B·ªè qua.")
            print("="*40 + "\n")
            await message.reply("Xin l·ªói, t√¥i kh√¥ng th·ªÉ ƒë·ªçc ƒë∆∞·ª£c t√™n nh√¢n v·∫≠t t·ª´ ·∫£nh n√†y. Vui l√≤ng th·ª≠ l·∫°i v·ªõi ·∫£nh r√µ h∆°n ho·∫∑c b√°o c√°o l·ªói n·∫øu v·∫•n ƒë·ªÅ ti·∫øp di·ªÖn.")
            return

        async with message.channel.typing():
            await asyncio.sleep(1)

            reply_lines = []
            for i, name in enumerate(character_names):
                display_name = name if name else "Kh√¥ng ƒë·ªçc ƒë∆∞·ª£c"
                lookup_name = name.lower().strip() if name else ""
                
                if lookup_name and lookup_name not in HEART_DATABASE:
                    log_new_character(name)

                heart_value = HEART_DATABASE.get(lookup_name, 0)
                heart_display = f"{heart_value:,}" if heart_value > 0 else "N/A"
                
                reply_lines.append(f"{i+1} | ‚ô°**{heart_display}** ¬∑ `{display_name}`")
            
            reply_content = "\n".join(reply_lines)
            await message.reply(reply_content)
            print("‚úÖ ƒê√É G·ª¨I PH·∫¢N H·ªíI TH√ÄNH C√îNG")

    except requests.exceptions.RequestException as e:
        print(f"  [L·ªñI] Kh√¥ng th·ªÉ t·∫£i ·∫£nh t·ª´ URL: {e}")
        await message.reply(f"Xin l·ªói, t√¥i kh√¥ng th·ªÉ t·∫£i ·∫£nh t·ª´ URL n√†y. L·ªói: {e}")
    except Exception as e:
        print(f"  [L·ªñI] ƒê√£ x·∫£y ra l·ªói kh√¥ng x√°c ƒë·ªãnh: {e}")
        await message.reply(f"ƒê√£ x·∫£y ra l·ªói khi x·ª≠ l√Ω ·∫£nh c·ªßa b·∫°n. L·ªói: {e}")

    print("="*40 + "\n")


# --- PH·∫¶N KH·ªûI ƒê·ªòNG ---
if __name__ == "__main__":
    # <<< THAY ƒê·ªîI QUAN TR·ªåNG: Ki·ªÉm tra c·∫£ TOKEN v√† GEMINI_API_KEY tr∆∞·ªõc khi ch·∫°y
    if TOKEN and GEMINI_API_KEY:
        print("‚úÖ ƒê√£ t√¨m th·∫•y DISCORD_TOKEN v√† GEMINI_API_KEY.")
        bot_thread = threading.Thread(target=bot.run, args=(TOKEN,))
        bot_thread.start()
        print("üöÄ Kh·ªüi ƒë·ªông Web Server ƒë·ªÉ gi·ªØ bot ho·∫°t ƒë·ªông...")
        run_web_server()
    else:
        if not TOKEN:
            print("‚ùå L·ªñI: Kh√¥ng t√¨m th·∫•y DISCORD_TOKEN trong t·ªáp .env. Vui l√≤ng th√™m TOKEN c·ªßa bot v√†o t·ªáp .env.")
        if not GEMINI_API_KEY:
            print("‚ùå L·ªñI: Kh√¥ng t√¨m th·∫•y GEMINI_API_KEY trong t·ªáp .env. Vui l√≤ng th√™m key c·ªßa Gemini API v√†o t·ªáp .env.")
