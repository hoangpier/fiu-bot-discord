# main.py (Phi√™n b·∫£n Ho√†n Ch·ªânh - ƒê·ªçc T√™n + M√£ S·ªë & Ch·ªëng L·ªói 429)

import discord
from discord.ext import commands
import os
import re
import requests
import io
import base64
from PIL import Image, ImageEnhance, ImageFilter, ImageOps
from dotenv import load_dotenv
import threading
from flask import Flask
import asyncio
import time # <<< TH√äM: Th∆∞ vi·ªán th·ªùi gian cho Cooldown

# --- PH·∫¶N 1: C·∫§U H√åNH WEB SERVER ---
app = Flask(__name__)

@app.route('/')
def home():
    """Trang ch·ªß ƒë∆°n gi·∫£n ƒë·ªÉ hi·ªÉn th·ªã bot ƒëang ho·∫°t ƒë·ªông."""
    return "Bot Discord ƒëang ho·∫°t ƒë·ªông."

def run_web_server():
    """Ch·∫°y web server Flask tr√™n c·ªïng ƒë∆∞·ª£c c·∫•u h√¨nh."""
    port = int(os.environ.get('PORT', 10000))
    app.run(host='0.0.0.0', port=port)

# --- PH·∫¶N 2: C·∫§U H√åNH V√Ä C√ÅC H√ÄM C·ª¶A BOT DISCORD ---
load_dotenv() # T·∫£i c√°c bi·∫øn m√¥i tr∆∞·ªùng t·ª´ t·ªáp .env

# L·∫•y TOKEN v√† API KEY t·ª´ file .env
TOKEN = os.getenv('DISCORD_TOKEN')
GEMINI_API_KEY = os.getenv('GEMINI_API_KEY')

KARUTA_ID = 646937666251915264
NEW_CHARACTERS_FILE = "new_characters.txt"
HEART_DATABASE_FILE = "tennhanvatvasotim.txt"

# <<< TH√äM: C·∫•u h√¨nh cho Cooldown ƒë·ªÉ ch·ªëng l·ªói 429 >>>
last_api_call_time = 0
COOLDOWN_SECONDS = 3 # Th·ªùi gian ch·ªù gi·ªØa c√°c l·∫ßn g·ªçi API (gi√¢y)

def load_heart_data(file_path):
    """
    T·∫£i d·ªØ li·ªáu s·ªë tim c·ªßa nh√¢n v·∫≠t t·ª´ m·ªôt file.
    """
    heart_db = {}
    try:
        with open(file_path, 'r', encoding='utf-8') as f:
            for line in f:
                line = line.strip()
                if not line.startswith('‚ô°') or not line:
                    continue
                parts = line.split('¬∑')
                if len(parts) >= 2:
                    try:
                        heart_str = parts[0].replace('‚ô°', '').replace(',', '').strip()
                        hearts = int(heart_str)
                        name = parts[-1].lower().strip()
                        if name:
                            heart_db[name] = hearts
                    except (ValueError, IndexError):
                        continue
    except FileNotFoundError:
        print(f"L·ªñI: Kh√¥ng t√¨m th·∫•y t·ªáp d·ªØ li·ªáu '{file_path}'.")
    except Exception as e:
        print(f"L·ªói khi ƒë·ªçc t·ªáp d·ªØ li·ªáu: {e}")
    print(f"‚úÖ ƒê√£ t·∫£i th√†nh c√¥ng {len(heart_db)} nh√¢n v·∫≠t v√†o c∆° s·ªü d·ªØ li·ªáu s·ªë tim.")
    return heart_db

HEART_DATABASE = load_heart_data(HEART_DATABASE_FILE)

def log_new_character(character_name):
    """
    Ghi l·∫°i t√™n nh√¢n v·∫≠t m·ªõi ch∆∞a c√≥ trong c∆° s·ªü d·ªØ li·ªáu s·ªë tim v√†o m·ªôt file.
    """
    try:
        existing_names = set()
        if os.path.exists(NEW_CHARACTERS_FILE):
            with open(NEW_CHARACTERS_FILE, 'r', encoding='utf-8') as f:
                existing_names = set(line.strip().lower() for line in f)
        
        if character_name and character_name.lower() not in existing_names:
            with open(NEW_CHARACTERS_FILE, 'a', encoding='utf-8') as f:
                f.write(f"{character_name}\n")
            print(f"  [LOG] ‚≠ê ƒê√£ l∆∞u nh√¢n v·∫≠t m·ªõi '{character_name}' v√†o file {NEW_CHARACTERS_FILE}")
    except Exception as e:
        print(f"L·ªói khi ƒëang l∆∞u nh√¢n v·∫≠t m·ªõi: {e}")

async def get_names_from_image_via_gemini_api(image_bytes):
    """
    S·ª≠ d·ª•ng Gemini API ƒë·ªÉ nh·∫≠n di·ªán t√™n nh√¢n v·∫≠t V√Ä M√É S·ªê t·ª´ ·∫£nh.
    Tr·∫£ v·ªÅ m·ªôt danh s√°ch c√°c tuple, m·ªói tuple ch·ª©a (t√™n, m√£ s·ªë).
    """
    if not GEMINI_API_KEY:
        print("  [L·ªñI API] Bi·∫øn m√¥i tr∆∞·ªùng GEMINI_API_KEY ch∆∞a ƒë∆∞·ª£c thi·∫øt l·∫≠p.")
        return [("L·ªói API (Key)", "0"), ("L·ªói API (Key)", "0"), ("L·ªói API (Key)", "0")]

    try:
        base64_image = base64.b64encode(image_bytes).decode('utf-8')
        prompt = "T·ª´ h√¨nh ·∫£nh th·∫ª b√†i Karuta n√†y, h√£y tr√≠ch xu·∫•t t√™n nh√¢n v·∫≠t v√† d√£y s·ªë ·ªü g√≥c d∆∞·ªõi c√πng b√™n ph·∫£i c·ªßa m·ªói th·∫ª. Tr·∫£ v·ªÅ k·∫øt qu·∫£ theo th·ª© t·ª± t·ª´ tr√°i sang ph·∫£i, m·ªói nh√¢n v·∫≠t tr√™n m·ªôt d√≤ng, theo ƒë·ªãnh d·∫°ng ch√≠nh x√°c: T√™n nh√¢n v·∫≠t #D√£yS·ªë"

        payload = {
            "contents": [
                {
                    "role": "user",
                    "parts": [
                        {"text": prompt},
                        {
                            "inlineData": {
                                "mimeType": "image/webp",
                                "data": base64_image
                            }
                        }
                    ]
                }
            ]
        }
        
        apiUrl = "https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-flash:generateContent?key=" + GEMINI_API_KEY
        print("  [API] ƒêang g·ª≠i ·∫£nh ƒë·∫øn Gemini API ƒë·ªÉ nh·∫≠n d·∫°ng (T√™n + M√£ s·ªë)...")
        
        response = requests.post(apiUrl, headers={'Content-Type': 'application/json'}, json=payload)
        response.raise_for_status()
        result = response.json()
        
        if result and result.get('candidates') and result['candidates'][0].get('content') and result['candidates'][0]['content'].get('parts'):
            api_text = result['candidates'][0]['content']['parts'][0]['text']
            
            processed_data = []
            lines = api_text.strip().split('\n')
            
            for line in lines:
                if '#' in line:
                    parts = line.split('#', 1)
                    name = parts[0].strip()
                    print_number = parts[1].strip()
                    
                    cleaned_name = re.sub(r'[^a-zA-Z0-9\s\'-.]', '', name)
                    cleaned_name = ' '.join(cleaned_name.split())
                    
                    processed_data.append((cleaned_name, print_number))
                else:
                    processed_data.append((line.strip(), "???"))

            print(f"  [API] Nh·∫≠n d·∫°ng t·ª´ Gemini API: {processed_data}")
            return processed_data
        else:
            print("  [API] Ph·∫£n h·ªìi t·ª´ Gemini API kh√¥ng ch·ª©a d·ªØ li·ªáu h·ª£p l·ªá.")
            return [("Kh√¥ng ƒë·ªçc ƒë∆∞·ª£c (API)", "0"), ("Kh√¥ng ƒë·ªçc ƒë∆∞·ª£c (API)", "0"), ("Kh√¥ng ƒë·ªçc ƒë∆∞·ª£c (API)", "0")]

    except requests.exceptions.RequestException as e:
        print(f"  [L·ªñI API] L·ªói khi g·ªçi Gemini API: {e}")
        return [("L·ªói API (Request)", "0"), ("L·ªói API (Request)", "0"), ("L·ªói API (Request)", "0")]
    except Exception as e:
        print(f"  [L·ªñI API] ƒê√£ x·∫£y ra l·ªói kh√¥ng x√°c ƒë·ªãnh khi x·ª≠ l√Ω API: {e}")
        return [("L·ªói API (Unknown)", "0"), ("L·ªói API (Unknown)", "0"), ("L·ªói API (Unknown)", "0")]

async def get_names_from_image_upgraded(image_bytes):
    """H√†m ƒë·ªçc ·∫£nh ƒë∆∞·ª£c n√¢ng c·∫•p, s·ª≠ d·ª•ng Gemini API."""
    return await get_names_from_image_via_gemini_api(image_bytes)

# --- PH·∫¶N CH√çNH C·ª¶A BOT ---
intents = discord.Intents.default()
intents.message_content = True
bot = commands.Bot(command_prefix="!", intents=intents)

@bot.command()
async def ping(ctx):
    """L·ªánh ping ƒë∆°n gi·∫£n ƒë·ªÉ ki·ªÉm tra bot c√≥ ho·∫°t ƒë·ªông kh√¥ng."""
    await ctx.send("Pong!")

@bot.event
async def on_ready():
    """S·ª± ki·ªán khi bot ƒë√£ ƒëƒÉng nh·∫≠p th√†nh c√¥ng v√†o Discord."""
    print(f'‚úÖ Bot Discord ƒë√£ ƒëƒÉng nh·∫≠p v·ªõi t√™n {bot.user}')
    print('Bot ƒëang ch·∫°y v·ªõi tr√¨nh ƒë·ªçc ·∫£nh n√¢ng c·∫•p (s·ª≠ d·ª•ng Gemini API).')

@bot.event
async def on_message(message):
    """
    S·ª± ki·ªán x·ª≠ l√Ω m·ªói khi c√≥ tin nh·∫Øn m·ªõi.
    ƒê√£ t√≠ch h·ª£p c∆° ch·∫ø Cooldown ƒë·ªÉ tr√°nh l·ªói 429.
    """
    global last_api_call_time

    await bot.process_commands(message)
    
    if not (message.author.id == KARUTA_ID and message.attachments):
        return

    # <<< B·∫ÆT ƒê·∫¶U: Logic ki·ªÉm tra Cooldown >>>
    current_time = time.time()
    if current_time - last_api_call_time < COOLDOWN_SECONDS:
        print(f"üîé [COOLDOWN] Y√™u c·∫ßu b·ªã b·ªè qua do c√≤n trong th·ªùi gian ch·ªù. Ch·ªù {COOLDOWN_SECONDS - (current_time - last_api_call_time):.1f}s n·ªØa.")
        return
    
    last_api_call_time = current_time
    # <<< K·∫æT TH√öC: Logic ki·ªÉm tra Cooldown >>>

    attachment = message.attachments[0]
    if not attachment.content_type.startswith('image/'):
        return

    print("\n" + "="*40)
    print(f"üîé [LOG] Ph√°t hi·ªán ·∫£nh drop t·ª´ KARUTA. B·∫Øt ƒë·∫ßu x·ª≠ l√Ω...")
    print(f"  - URL ·∫£nh: {attachment.url}")

    try:
        response = requests.get(attachment.url)
        response.raise_for_status()
        image_bytes = response.content

        character_data = await get_names_from_image_upgraded(image_bytes)
        
        print(f"  -> K·∫øt qu·∫£ nh·∫≠n d·∫°ng (T√™n, M√£ s·ªë): {character_data}")

        if not character_data or any(name.startswith("L·ªói API") for name, num in character_data):
            print("  -> L·ªói API ho·∫∑c kh√¥ng nh·∫≠n d·∫°ng ƒë∆∞·ª£c. B·ªè qua.")
            last_api_call_time = current_time - COOLDOWN_SECONDS 
            print("="*40 + "\n")
            await message.reply("Xin l·ªói, t√¥i kh√¥ng th·ªÉ ƒë·ªçc ƒë∆∞·ª£c d·ªØ li·ªáu t·ª´ ·∫£nh n√†y. Vui l√≤ng th·ª≠ l·∫°i v·ªõi ·∫£nh r√µ h∆°n ho·∫∑c b√°o c√°o l·ªói n·∫øu v·∫•n ƒë·ªÅ ti·∫øp di·ªÖn.")
            return

        async with message.channel.typing():
            await asyncio.sleep(1)

            reply_lines = []
            for i, (name, print_number) in enumerate(character_data):
                display_name = name if name else "Kh√¥ng ƒë·ªçc ƒë∆∞·ª£c"
                lookup_name = name.lower().strip() if name else ""
                
                if lookup_name and lookup_name not in HEART_DATABASE:
                    log_new_character(name)

                heart_value = HEART_DATABASE.get(lookup_name, 0)
                heart_display = f"{heart_value:,}" if heart_value > 0 else "N/A"
                
                reply_lines.append(f"{i+1} | ‚ô°**{heart_display}** ¬∑ `{display_name}` `#{print_number}`")
            
            reply_content = "\n".join(reply_lines)
            await message.reply(reply_content)
            print("‚úÖ ƒê√É G·ª¨I PH·∫¢N H·ªíI TH√ÄNH C√îNG")

    except requests.exceptions.RequestException as e:
        print(f"  [L·ªñI] Kh√¥ng th·ªÉ t·∫£i ·∫£nh t·ª´ URL: {e}")
        await message.reply(f"Xin l·ªói, t√¥i kh√¥ng th·ªÉ t·∫£i ·∫£nh t·ª´ URL n√†y. L·ªói: {e}")
    except Exception as e:
        print(f"  [L·ªñI] ƒê√£ x·∫£y ra l·ªói kh√¥ng x√°c ƒë·ªãnh: {e}")
        await message.reply(f"ƒê√£ x·∫£y ra l·ªói khi x·ª≠ l√Ω ·∫£nh c·ªßa b·∫°n. L·ªói: {e}")

    print("="*40 + "\n")


# --- PH·∫¶N KH·ªûI ƒê·ªòNG ---
if __name__ == "__main__":
    if TOKEN and GEMINI_API_KEY:
        print("‚úÖ ƒê√£ t√¨m th·∫•y DISCORD_TOKEN v√† GEMINI_API_KEY.")
        bot_thread = threading.Thread(target=bot.run, args=(TOKEN,))
        bot_thread.start()
        print("üöÄ Kh·ªüi ƒë·ªông Web Server ƒë·ªÉ gi·ªØ bot ho·∫°t ƒë·ªông...")
        run_web_server()
    else:
        if not TOKEN:
            print("‚ùå L·ªñI: Kh√¥ng t√¨m th·∫•y DISCORD_TOKEN trong t·ªáp .env. Vui l√≤ng th√™m TOKEN c·ªßa bot v√†o t·ªáp .env.")
        if not GEMINI_API_KEY:
            print("‚ùå L·ªñI: Kh√¥ng t√¨m th·∫•y GEMINI_API_KEY trong t·ªáp .env. Vui l√≤ng th√™m key c·ªßa Gemini API v√†o t·ªáp .env.")
