# main.py (Phi√™n b·∫£n OCR T·∫°i Ch·ªó - S·ª≠ d·ª•ng PIL + Tesseract - ƒê√É S·ª¨A L·ªñI)

import discord
from discord.ext import commands
import os
import re
import requests
import io
from PIL import Image, ImageEnhance
from dotenv import load_dotenv
import threading
from flask import Flask
import asyncio
import pytesseract

# --- PH·∫¶N 1: C·∫§U H√åNH WEB SERVER ---
app = Flask(__name__)

@app.route('/')
def home():
    """Trang ch·ªß ƒë∆°n gi·∫£n ƒë·ªÉ hi·ªÉn th·ªã bot ƒëang ho·∫°t ƒë·ªông."""
    return "Bot Discord ƒëang ho·∫°t ƒë·ªông."

def run_web_server():
    """Ch·∫°y web server Flask tr√™n c·ªïng ƒë∆∞·ª£c c·∫•u h√¨nh."""
    port = int(os.environ.get('PORT', 10000))
    app.run(host='0.0.0.0', port=port)

# --- PH·∫¶N 2: C·∫§U H√åNH V√Ä C√ÅC H√ÄM C·ª¶A BOT DISCORD ---
load_dotenv()
TOKEN = os.getenv('DISCORD_TOKEN')

# C·∫§U H√åNH TESSERACT - QUAN TR·ªåNG!
# Tr√™n Linux/Ubuntu (Render.com):
# pytesseract.pytesseract.tesseract_cmd = '/usr/bin/tesseract'
# Tr√™n Windows:
# pytesseract.pytesseract.tesseract_cmd = r'C:\Program Files\Tesseract-OCR\tesseract.exe'

KARUTA_ID = 646937666251915264
NEW_CHARACTERS_FILE = "new_characters.txt"
HEART_DATABASE_FILE = "tennhanvatvasotim.txt"

def load_heart_data(file_path):
    """T·∫£i d·ªØ li·ªáu s·ªë tim c·ªßa nh√¢n v·∫≠t t·ª´ m·ªôt file."""
    heart_db = {}
    try:
        with open(file_path, 'r', encoding='utf-8') as f:
            for line in f:
                line = line.strip()
                if not line.startswith('‚ô°') or not line: 
                    continue
                parts = line.split('¬∑')
                if len(parts) >= 2:
                    try:
                        heart_str = parts[0].replace('‚ô°', '').replace(',', '').strip()
                        hearts = int(heart_str)
                        name = parts[-1].lower().strip()
                        if name: 
                            heart_db[name] = hearts
                    except (ValueError, IndexError): 
                        continue
    except FileNotFoundError:
        print(f"L·ªñI: Kh√¥ng t√¨m th·∫•y t·ªáp d·ªØ li·ªáu '{file_path}'.")
    
    print(f"‚úÖ ƒê√£ t·∫£i th√†nh c√¥ng {len(heart_db)} nh√¢n v·∫≠t v√†o c∆° s·ªü d·ªØ li·ªáu s·ªë tim.")
    return heart_db

HEART_DATABASE = load_heart_data(HEART_DATABASE_FILE)

def log_new_character(character_name):
    """Ghi l·∫°i t√™n nh√¢n v·∫≠t m·ªõi."""
    try:
        existing_names = set()
        if os.path.exists(NEW_CHARACTERS_FILE):
            with open(NEW_CHARACTERS_FILE, 'r', encoding='utf-8') as f:
                existing_names = set(line.strip().lower() for line in f)
        
        if character_name and character_name.lower() not in existing_names:
            with open(NEW_CHARACTERS_FILE, 'a', encoding='utf-8') as f:
                f.write(f"{character_name}\n")
            print(f"  [LOG] ‚≠ê ƒê√£ l∆∞u nh√¢n v·∫≠t m·ªõi '{character_name}' v√†o file {NEW_CHARACTERS_FILE}")
    except Exception as e:
        print(f"L·ªói khi ƒëang l∆∞u nh√¢n v·∫≠t m·ªõi: {e}")

def preprocess_image_for_ocr(image):
    """Ti·ªÅn x·ª≠ l√Ω ·∫£nh ƒë·ªÉ c·∫£i thi·ªán ƒë·ªô ch√≠nh x√°c OCR"""
    # Chuy·ªÉn sang grayscale
    if image.mode != 'L':
        image = image.convert('L')
    
    # TƒÉng contrast
    enhancer = ImageEnhance.Contrast(image)
    image = enhancer.enhance(2.0)
    
    # TƒÉng k√≠ch th∆∞·ªõc ·∫£nh ƒë·ªÉ OCR ƒë·ªçc t·ªët h∆°n
    width, height = image.size
    image = image.resize((width * 2, height * 2), Image.Resampling.LANCZOS)
    
    return image

async def get_names_from_image_ocr(image_bytes):
    """
    S·ª≠ d·ª•ng PIL ƒë·ªÉ c·∫Øt ·∫£nh v√† Tesseract ƒë·ªÉ ƒë·ªçc ch·ªØ.
    S·ª¨A L·ªñI: T·ªça ƒë·ªô v√† c√°ch x·ª≠ l√Ω ·∫£nh
    """
    try:
        img = Image.open(io.BytesIO(image_bytes))
        width, height = img.size
        
        print(f"  [OCR] K√≠ch th∆∞·ªõc ·∫£nh g·ªëc: {width}x{height}")
        
        # S·ª¨A L·ªñI: Ki·ªÉm tra k√≠ch th∆∞·ªõc ·∫£nh linh ho·∫°t h∆°n
        if width < 600 or height < 200:
            print(f"  [OCR] K√≠ch th∆∞·ªõc ·∫£nh qu√° nh·ªè ({width}x{height}), b·ªè qua.")
            return []

        # S·ª¨A L·ªñI: T·ªça ƒë·ªô ƒë·ªông d·ª±a tr√™n k√≠ch th∆∞·ªõc ·∫£nh th·ª±c t·∫ø
        # Chia ·∫£nh th√†nh 3 ph·∫ßn b·∫±ng nhau theo chi·ªÅu ngang
        card_width = width // 3
        card_height = height
        
        processed_data = []

        for i in range(3):  # X·ª≠ l√Ω 3 th·∫ª
            # S·ª¨A L·ªñI: T·ªça ƒë·ªô ƒë·ªông
            x_start = i * card_width
            x_end = x_start + card_width
            
            # C·∫Øt ·∫£nh th·∫ª
            card_img = img.crop((x_start, 0, x_end, card_height))
            
            # S·ª¨A L·ªñI: V√πng t√™n nh√¢n v·∫≠t - d·ª±a tr√™n t·ª∑ l·ªá
            name_height = int(card_height * 0.25)  # 25% ph√≠a tr√™n
            name_img = card_img.crop((10, 10, card_width - 10, name_height))
            
            # S·ª¨A L·ªñI: V√πng m√£ s·ªë - ph√≠a d∆∞·ªõi c√πng
            print_height = int(card_height * 0.1)  # 10% ph√≠a d∆∞·ªõi
            print_img = card_img.crop((20, card_height - print_height - 10, card_width - 20, card_height - 10))

            # Ti·ªÅn x·ª≠ l√Ω ·∫£nh
            name_img = preprocess_image_for_ocr(name_img)
            print_img = preprocess_image_for_ocr(print_img)
            
            # S·ª¨A L·ªñI: C·∫•u h√¨nh Tesseract t·ªët h∆°n
            try:
                # ƒê·ªçc t√™n nh√¢n v·∫≠t
                char_name_config = r"--psm 8 --oem 3 -c tessedit_char_whitelist=ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz "
                char_name = pytesseract.image_to_string(name_img, config=char_name_config).strip()
                char_name = re.sub(r'\s+', ' ', char_name)  # Lo·∫°i b·ªè kho·∫£ng tr·∫Øng th·ª´a
                
                # ƒê·ªçc m√£ s·ªë
                print_num_config = r"--psm 7 --oem 3 -c tessedit_char_whitelist=0123456789#"
                print_number = pytesseract.image_to_string(print_img, config=print_num_config).strip()
                
                # S·ª¨A L·ªñI: L√†m s·∫°ch k·∫øt qu·∫£
                if char_name and len(char_name) > 1:
                    # Lo·∫°i b·ªè k√Ω t·ª± l·∫°
                    char_name = re.sub(r'[^\w\s]', '', char_name).strip()
                    if char_name:
                        processed_data.append((char_name, print_number or "???"))
                        print(f"  [OCR] Th·∫ª {i+1}: '{char_name}' - #{print_number}")
                
            except Exception as ocr_error:
                print(f"  [L·ªñI OCR] L·ªói khi ƒë·ªçc th·∫ª {i+1}: {ocr_error}")
                continue

        print(f"  [OCR] T·ªïng k·∫øt qu·∫£ nh·∫≠n d·∫°ng: {len(processed_data)} th·∫ª")
        return processed_data

    except Exception as e:
        print(f"  [L·ªñI OCR] L·ªói t·ªïng qu√°t khi x·ª≠ l√Ω ·∫£nh: {e}")
        return []

# --- PH·∫¶N CH√çNH C·ª¶A BOT ---
intents = discord.Intents.default()
intents.message_content = True
bot = commands.Bot(command_prefix="!", intents=intents)

@bot.event
async def on_ready():
    """S·ª± ki·ªán khi bot ƒë√£ ƒëƒÉng nh·∫≠p th√†nh c√¥ng v√†o Discord."""
    print(f'‚úÖ Bot Discord ƒë√£ ƒëƒÉng nh·∫≠p v·ªõi t√™n {bot.user}')
    print('Bot ƒëang ch·∫°y v·ªõi tr√¨nh ƒë·ªçc ·∫£nh OCR T·∫°i Ch·ªó (PIL + Tesseract).')
    
    # TEST TESSERACT
    try:
        test_result = pytesseract.get_tesseract_version()
        print(f'‚úÖ Tesseract version: {test_result}')
    except Exception as e:
        print(f'‚ùå L·ªñI: Kh√¥ng th·ªÉ kh·ªüi ƒë·ªông Tesseract: {e}')
        print('   H√£y ƒë·∫£m b·∫£o Tesseract ƒë√£ ƒë∆∞·ª£c c√†i ƒë·∫∑t ƒë√∫ng c√°ch!')

@bot.event
async def on_message(message):
    """S·ª± ki·ªán x·ª≠ l√Ω m·ªói khi c√≥ tin nh·∫Øn m·ªõi."""
    
    # S·ª¨A L·ªñI: Ki·ªÉm tra ƒëi·ªÅu ki·ªán ch√≠nh x√°c h∆°n
    if message.author.id != KARUTA_ID:
        return
    
    if not message.attachments:
        return
    
    attachment = message.attachments[0]
    if not attachment.content_type or not attachment.content_type.startswith('image/'):
        return

    print("\n" + "="*50)
    print(f"üîé [LOG] Ph√°t hi·ªán ·∫£nh drop t·ª´ KARUTA!")
    print(f"  - T·ªáp: {attachment.filename}")
    print(f"  - Lo·∫°i: {attachment.content_type}")
    print(f"  - K√≠ch th∆∞·ªõc: {attachment.size} bytes")
    print(f"  - URL: {attachment.url}")

    try:
        # S·ª¨A L·ªñI: TƒÉng timeout v√† x·ª≠ l√Ω l·ªói k·∫øt n·ªëi
        response = requests.get(attachment.url, timeout=30)
        response.raise_for_status()
        image_bytes = response.content
        print(f"  ‚úÖ T·∫£i ·∫£nh th√†nh c√¥ng ({len(image_bytes)} bytes)")

        # G·ªçi h√†m OCR ƒë√£ s·ª≠a l·ªói
        character_data = await get_names_from_image_ocr(image_bytes)
        
        if not character_data:
            print("  ‚ùå Kh√¥ng nh·∫≠n d·∫°ng ƒë∆∞·ª£c d·ªØ li·ªáu n√†o t·ª´ ·∫£nh.")
            print("="*50 + "\n")
            return

        # S·ª¨A L·ªñI: Th·ªùi gian ch·ªù ph√π h·ª£p h∆°n
        async with message.channel.typing():
            await asyncio.sleep(0.5)  # Gi·∫£m th·ªùi gian ch·ªù
            
            reply_lines = []
            for i, (name, print_number) in enumerate(character_data):
                display_name = name if name else "Kh√¥ng ƒë·ªçc ƒë∆∞·ª£c"
                lookup_name = name.lower().strip() if name else ""
                
                # Ghi log nh√¢n v·∫≠t m·ªõi
                if lookup_name and lookup_name not in HEART_DATABASE:
                    log_new_character(name)

                # Tra c·ª©u s·ªë tim
                heart_value = HEART_DATABASE.get(lookup_name, 0)
                heart_display = f"{heart_value:,}" if heart_value > 0 else "N/A"
                
                # S·ª¨A L·ªñI: Format hi·ªÉn th·ªã ƒë·∫πp h∆°n
                reply_lines.append(f"{i+1} | ‚ô°**{heart_display}** ¬∑ `{display_name}` `#{print_number}`")
            
            reply_content = "\n".join(reply_lines)
            await message.reply(reply_content)
            print("‚úÖ ƒê√É G·ª¨I PH·∫¢N H·ªíI TH√ÄNH C√îNG")
            print(f"  N·ªôi dung: {reply_content}")

    except requests.RequestException as e:
        print(f"  [L·ªñI M·∫†NG] Kh√¥ng th·ªÉ t·∫£i ·∫£nh: {e}")
    except Exception as e:
        print(f"  [L·ªñI T·ªîNG QU√ÅT] {e}")
        import traceback
        traceback.print_exc()
    
    print("="*50 + "\n")

# S·ª¨A L·ªñI: Th√™m l·ªánh test OCR
@bot.command(name='test')
async def test_ocr(ctx):
    """L·ªánh test OCR v·ªõi ·∫£nh t·ª´ URL"""
    if ctx.message.attachments:
        attachment = ctx.message.attachments[0]
        if attachment.content_type.startswith('image/'):
            response = requests.get(attachment.url)
            character_data = await get_names_from_image_ocr(response.content)
            await ctx.send(f"K·∫øt qu·∫£ test: {character_data}")
    else:
        await ctx.send("Vui l√≤ng ƒë√≠nh k√®m m·ªôt ·∫£nh ƒë·ªÉ test!")

# --- PH·∫¶N KH·ªûI ƒê·ªòNG ---
if __name__ == "__main__":
    if TOKEN:
        print("‚úÖ ƒê√£ t√¨m th·∫•y DISCORD_TOKEN.")
        
        # S·ª¨A L·ªñI: Kh·ªüi ƒë·ªông bot trong thread ri√™ng v·ªõi x·ª≠ l√Ω l·ªói
        def run_bot():
            try:
                bot.run(TOKEN)
            except Exception as e:
                print(f"‚ùå L·ªói khi ch·∫°y bot: {e}")
        
        bot_thread = threading.Thread(target=run_bot)
        bot_thread.daemon = True  # ƒê·∫£m b·∫£o thread k·∫øt th√∫c khi main process k·∫øt th√∫c
        bot_thread.start()
        
        print("üöÄ Kh·ªüi ƒë·ªông Web Server ƒë·ªÉ gi·ªØ bot ho·∫°t ƒë·ªông...")
        run_web_server()
    else:
        print("‚ùå L·ªñI: Kh√¥ng t√¨m th·∫•y DISCORD_TOKEN trong t·ªáp .env.")
