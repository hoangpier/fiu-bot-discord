# fiu.py (Phi√™n b·∫£n g·ªôp t·∫•t c·∫£ trong m·ªôt file ƒë·ªÉ deploy tr√™n Render)
import os
import json
import discord
import requests
import aiohttp
import threading
from discord.ext import commands
from flask import Flask, request, redirect
from dotenv import load_dotenv

# --- C√ÄI ƒê·∫∂T BAN ƒê·∫¶U ---
load_dotenv()
TOKEN = os.getenv('DISCORD_TOKEN')
CLIENT_ID = os.getenv('DISCORD_CLIENT_ID')
CLIENT_SECRET = os.getenv('DISCORD_CLIENT_SECRET')
OWNER_ID = int(os.getenv('OWNER_ID', 0))

if not all([TOKEN, CLIENT_ID, CLIENT_SECRET, OWNER_ID]):
    exit("L·ªñI: H√£y ch·∫Øc ch·∫Øn DISCORD_TOKEN, CLIENT_ID, CLIENT_SECRET, v√† OWNER_ID ƒë√£ ƒë∆∞·ª£c thi·∫øt l·∫≠p trong file .env")

# ==============================================================================
# PH·∫¶N 1: CODE C·ª¶A BOT DISCORD (Gi·ªØ nguy√™n)
# ==============================================================================
intents = discord.Intents.default()
intents.members = True
intents.message_content = True
bot = commands.Bot(command_prefix='!', intents=intents, owner_id=OWNER_ID)

def get_user_access_token(user_id: int):
    try:
        with open('tokens.json', 'r') as f:
            tokens = json.load(f)
            return tokens.get(str(user_id))
    except (FileNotFoundError, json.JSONDecodeError):
        return None

async def add_member_to_guild(guild_id: int, user_id: int, access_token: str):
    url = f"https://discord.com/api/v10/guilds/{guild_id}/members/{user_id}"
    headers = {
        "Authorization": f"Bot {TOKEN}",
        "Content-Type": "application/json"
    }
    data = {"access_token": access_token}
    
    async with aiohttp.ClientSession() as session:
        async with session.put(url, headers=headers, json=data) as response:
            if response.status in [201, 204]:
                return True, "Th√†nh c√¥ng ho·∫∑c ƒë√£ c√≥ trong server"
            else:
                error_text = await response.text()
                return False, f"HTTP {response.status}: {error_text}"

@bot.event
async def on_ready():
    print(f'>>> Bot {bot.user.name} ƒë√£ s·∫µn s√†ng!')

@bot.command(name='force_add', help='Th√™m m·ªôt ng∆∞·ªùi d√πng v√†o t·∫•t c·∫£ c√°c server.')
@commands.is_owner()
async def force_add(ctx, user_id_str: str):
    try:
        user_id = int(user_id_str)
    except ValueError:
        await ctx.send("‚ö†Ô∏è ID ng∆∞·ªùi d√πng kh√¥ng h·ª£p l·ªá. Vui l√≤ng ch·ªâ nh·∫≠p s·ªë.")
        return
    await ctx.send(f"‚úÖ ƒê√£ nh·∫≠n l·ªánh! B·∫Øt ƒë·∫ßu qu√° tr√¨nh th√™m ng∆∞·ªùi d√πng c√≥ ID `{user_id}`...")
    access_token = get_user_access_token(user_id)
    if not access_token:
        await ctx.send(f"‚ùå **L·ªói:** Kh√¥ng t√¨m th·∫•y m√£ ·ªßy quy·ªÅn cho ng∆∞·ªùi d√πng n√†y.")
        return
    try:
        user_to_add = await bot.fetch_user(user_id)
    except discord.NotFound:
        await ctx.send(f"‚ùå L·ªói: Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng c√≥ ID `{user_id}`.")
        return
    success_count = 0
    fail_count = 0
    for guild in bot.guilds:
        success, message = await add_member_to_guild(guild.id, user_id, access_token)
        if success:
            print(f"üëç Th√™m th√†nh c√¥ng {user_to_add.name} v√†o server {guild.name}: {message}")
            success_count += 1
        else:
            print(f"üëé L·ªói khi th√™m v√†o {guild.name}: {message}")
            fail_count += 1
    await ctx.send(f"\n--- **HO√ÄN T·∫§T** --- \n‚úÖ Th√™m th√†nh c√¥ng v√†o **{success_count}** server.\n‚ùå Th·∫•t b·∫°i ·ªü **{fail_count}** server.")

# ==============================================================================
# PH·∫¶N 2: HTML/CSS V√Ä WEB SERVER
# ==============================================================================

# --- N·ªôi dung CSS ƒë∆∞·ª£c nh√∫ng v√†o ƒë√¢y ---
CSS_CONTENT = """
<style>
    @import url('https://fonts.googleapis.com/css2?family=Roboto:wght@400;700&display=swap');
    body {
        font-family: 'Roboto', sans-serif;
        background-color: #36393f;
        color: #dcddde;
        display: flex;
        justify-content: center;
        align-items: center;
        height: 100vh;
        margin: 0;
        text-align: center;
    }
    .container {
        background-color: #2f3136;
        padding: 40px;
        border-radius: 8px;
        box-shadow: 0 4px 15px rgba(0, 0, 0, 0.2);
        max-width: 500px;
        width: 90%;
    }
    h1 { color: #ffffff; margin-bottom: 20px; }
    p { font-size: 1.1em; line-height: 1.6; }
    .button {
        display: inline-block;
        background-color: #5865F2;
        color: #ffffff;
        padding: 15px 30px;
        text-decoration: none;
        font-weight: bold;
        border-radius: 5px;
        margin-top: 25px;
        transition: background-color 0.3s ease;
        font-size: 1.2em;
    }
    .button:hover { background-color: #4752C4; }
    .success-icon { font-size: 50px; color: #43b581; }
    .error-icon { font-size: 50px; color: #f04747; }
    .username { font-weight: bold; color: #5865F2; }
</style>
"""

# --- C√°c template HTML d∆∞·ªõi d·∫°ng chu·ªói f-string ---
def get_index_page(auth_url):
    return f"""
    <!DOCTYPE html>
    <html lang="vi">
    <head>
        <meta charset="UTF-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <title>·ª¶y quy·ªÅn Bot</title>
        {CSS_CONTENT}
    </head>
    <body>
        <div class="container">
            <h1>Ch√†o m·ª´ng ƒë·∫øn v·ªõi Trang ·ª¶y Quy·ªÅn</h1>
            <p>ƒê·ªÉ s·ª≠ d·ª•ng c√°c t√≠nh nƒÉng c·ªßa bot, vui l√≤ng ƒëƒÉng nh·∫≠p v√† c·∫•p quy·ªÅn b·∫±ng t√†i kho·∫£n Discord c·ªßa b·∫°n.</p>
            <a href="{auth_url}" class="button">ƒêƒÉng nh·∫≠p v·ªõi Discord</a>
        </div>
    </body>
    </html>
    """

def get_success_page(username):
    return f"""
    <!DOCTYPE html>
    <html lang="vi">
    <head>
        <meta charset="UTF-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <title>Th√†nh c√¥ng!</title>
        {CSS_CONTENT}
    </head>
    <body>
        <div class="container">
            <div class="success-icon">‚úì</div>
            <h1>·ª¶y quy·ªÅn th√†nh c√¥ng!</h1>
            <p>C·∫£m ∆°n <span class="username">{username}</span>, b·∫°n ƒë√£ c·∫•p quy·ªÅn cho bot. B√¢y gi·ªù b·∫°n c√≥ th·ªÉ ƒë√≥ng trang n√†y.</p>
        </div>
    </body>
    </html>
    """

def get_error_page(error_message):
    return f"""
    <!DOCTYPE html>
    <html lang="vi">
    <head>
        <meta charset="UTF-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <title>C√≥ l·ªói x·∫£y ra</title>
        {CSS_CONTENT}
    </head>
    <body>
        <div class="container">
            <div class="error-icon">‚úó</div>
            <h1>ƒê√£ c√≥ l·ªói x·∫£y ra</h1>
            <p>Kh√¥ng th·ªÉ ho√†n t·∫•t qu√° tr√¨nh ·ªßy quy·ªÅn. Vui l√≤ng th·ª≠ l·∫°i sau.</p>
            <p><em>Chi ti·∫øt l·ªói: {error_message}</em></p>
        </div>
    </body>
    </html>
    """

# --- Code Web Server ---
app = Flask(__name__)

@app.route('/')
def index():
    base_url = os.environ.get('RENDER_EXTERNAL_URL', 'http://127.0.0.1:5000')
    redirect_uri = f"{base_url}/callback"
    auth_url = (
        f'https://discord.com/api/oauth2/authorize?client_id={CLIENT_ID}'
        f'&redirect_uri={redirect_uri}&response_type=code&scope=identify%20guilds.join'
    )
    return get_index_page(auth_url)

@app.route('/callback')
def callback():
    code = request.args.get('code')
    base_url = os.environ.get('RENDER_EXTERNAL_URL', 'http://127.0.0.1:5000')
    redirect_uri = f"{base_url}/callback"

    token_url = 'https://discord.com/api/v10/oauth2/token'
    payload = {
        'client_id': CLIENT_ID,
        'client_secret': CLIENT_SECRET,
        'grant_type': 'authorization_code',
        'code': code,
        'redirect_uri': redirect_uri,
    }
    headers = {'Content-Type': 'application/x-www-form-urlencoded'}
    
    try:
        token_response = requests.post(token_url, data=payload, headers=headers)
        token_response.raise_for_status()
        token_data = token_response.json()
    except requests.exceptions.RequestException as e:
        print(f"L·ªói khi g·ªçi API token: {e}")
        return get_error_page("Kh√¥ng th·ªÉ k·∫øt n·ªëi ƒë·∫øn m√°y ch·ªß Discord.")

    access_token = token_data.get('access_token')
    if not access_token:
        error_details = token_data.get('error_description', 'Kh√¥ng c√≥ chi ti·∫øt.')
        return get_error_page(f"Kh√¥ng th·ªÉ l·∫•y access token. Ph·∫£n h·ªìi: {error_details}")

    user_info_url = 'https://discord.com/api/v10/users/@me'
    headers = {'Authorization': f'Bearer {access_token}'}
    
    try:
        user_response = requests.get(user_info_url, headers=headers)
        user_response.raise_for_status()
        user_data = user_response.json()
    except requests.exceptions.RequestException as e:
        print(f"L·ªói khi g·ªçi API ng∆∞·ªùi d√πng: {e}")
        return get_error_page("Kh√¥ng th·ªÉ l·∫•y th√¥ng tin ng∆∞·ªùi d√πng t·ª´ Discord.")
        
    user_id = user_data['id']
    username = user_data['username']
    
    try:
        with open('tokens.json', 'r') as f:
            tokens = json.load(f)
    except (FileNotFoundError, json.JSONDecodeError):
        tokens = {}
        
    tokens[user_id] = access_token
    
    with open('tokens.json', 'w') as f:
        json.dump(tokens, f, indent=4)
        
    return get_success_page(username)

def run_flask():
    port = int(os.environ.get('PORT', 5000))
    app.run(host='0.0.0.0', port=port)

# ==============================================================================
# PH·∫¶N 3: CH·∫†Y C·∫¢ HAI
# ==============================================================================
if __name__ == "__main__":
    flask_thread = threading.Thread(target=run_flask)
    flask_thread.daemon = True
    flask_thread.start()
    print(">>> Web server ƒë√£ kh·ªüi ƒë·ªông trong lu·ªìng n·ªÅn.")

    print(">>> ƒêang kh·ªüi ƒë·ªông bot Discord...")
    bot.run(TOKEN)
